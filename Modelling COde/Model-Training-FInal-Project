{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2250642,"sourceType":"datasetVersion","datasetId":1075326}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Data Loading","metadata":{}},{"cell_type":"code","source":"import pandas as pd\ndataframe = pd.read_csv('/kaggle/input/suicide-watch/Suicide_Detection.csv')\ndataframe.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:23:50.418840Z","iopub.execute_input":"2024-11-25T02:23:50.419137Z","iopub.status.idle":"2024-11-25T02:23:55.322657Z","shell.execute_reply.started":"2024-11-25T02:23:50.419111Z","shell.execute_reply":"2024-11-25T02:23:55.321755Z"}},"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                               text        class\n0           2  Ex Wife Threatening SuicideRecently I left my ...      suicide\n1           3  Am I weird I don't get affected by compliments...  non-suicide\n2           4  Finally 2020 is almost over... So I can never ...  non-suicide\n3           8          i need helpjust help me im crying so hard      suicide\n4           9  I’m so lostHello, my name is Adam (16) and I’v...      suicide","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>text</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>Ex Wife Threatening SuicideRecently I left my ...</td>\n      <td>suicide</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>Am I weird I don't get affected by compliments...</td>\n      <td>non-suicide</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>Finally 2020 is almost over... So I can never ...</td>\n      <td>non-suicide</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8</td>\n      <td>i need helpjust help me im crying so hard</td>\n      <td>suicide</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9</td>\n      <td>I’m so lostHello, my name is Adam (16) and I’v...</td>\n      <td>suicide</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"suicide = dataframe[dataframe['class']=='suicide']\nnon_suicide = dataframe[dataframe['class']== 'non-suicide']\nsuicide = suicide.head(50000)\nnon_suicide = non_suicide.head(50000)\ndataframe = pd.concat([suicide,non_suicide])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:23:55.324292Z","iopub.execute_input":"2024-11-25T02:23:55.324561Z","iopub.status.idle":"2024-11-25T02:23:55.384217Z","shell.execute_reply.started":"2024-11-25T02:23:55.324536Z","shell.execute_reply":"2024-11-25T02:23:55.383297Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"dataframe.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:23:55.385233Z","iopub.execute_input":"2024-11-25T02:23:55.385493Z","iopub.status.idle":"2024-11-25T02:23:55.419682Z","shell.execute_reply.started":"2024-11-25T02:23:55.385468Z","shell.execute_reply":"2024-11-25T02:23:55.418873Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 100000 entries, 0 to 99822\nData columns (total 3 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   Unnamed: 0  100000 non-null  int64 \n 1   text        100000 non-null  object\n 2   class       100000 non-null  object\ndtypes: int64(1), object(2)\nmemory usage: 3.1+ MB\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"## Data Preprocessing","metadata":{}},{"cell_type":"markdown","source":"### Check for missing value","metadata":{}},{"cell_type":"code","source":"dataframe.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:23:55.421787Z","iopub.execute_input":"2024-11-25T02:23:55.422080Z","iopub.status.idle":"2024-11-25T02:23:55.440050Z","shell.execute_reply.started":"2024-11-25T02:23:55.422056Z","shell.execute_reply":"2024-11-25T02:23:55.439213Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"Unnamed: 0    0\ntext          0\nclass         0\ndtype: int64"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"### Process with text hammer and nltk","metadata":{}},{"cell_type":"code","source":"!pip install text_hammer --no-deps\nimport text_hammer as th","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:23:55.441021Z","iopub.execute_input":"2024-11-25T02:23:55.441297Z","iopub.status.idle":"2024-11-25T02:24:05.807322Z","shell.execute_reply.started":"2024-11-25T02:23:55.441251Z","shell.execute_reply":"2024-11-25T02:24:05.806586Z"}},"outputs":[{"name":"stdout","text":"Collecting text_hammer\n  Downloading text_hammer-0.1.5-py3-none-any.whl.metadata (2.2 kB)\nDownloading text_hammer-0.1.5-py3-none-any.whl (7.6 kB)\nInstalling collected packages: text_hammer\nSuccessfully installed text_hammer-0.1.5\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize \nnltk.download('stopwords')\nnltk.download('punkt')\nlists = stopwords.words('english')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:24:05.808509Z","iopub.execute_input":"2024-11-25T02:24:05.809139Z","iopub.status.idle":"2024-11-25T02:24:05.968074Z","shell.execute_reply.started":"2024-11-25T02:24:05.809098Z","shell.execute_reply":"2024-11-25T02:24:05.967292Z"}},"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"stopwords_list = ['i','I', 'am', 'is','are','this','that','then','those','have','has','it','can','could','the','had','was','were','been','them','what',\n                  'yet', 'though', 'wherein', 'really', 'show', 'then', 'rather', 'same', 'con', 'call', 'is', 'twenty', 'side', 'go', 'namely',\n                  'every', 'top', 'for', \"'m\", 'with', 'either', 'because', 'two', 'well', 'when', 'those', 'under', 'thin', 'amount', 'upon', \n                  'kg', 'the', \"that'll\", 'ca', 'even', 'very', 'into', 'by', '‘m', 'keep', 'although', 'done', 'bottom', 'detail', 'whatever', \n                  'from', 'formerly', 'these', 'enough', 'twelve', 'of', 'too', 'already', 'move', 'something', 'few', 'nothing', 'they', 'does',\n                  'us', 'next', 'cry', 'but', 'eight', '‘s', 'however', 'four', \"'ll\", 'has', 'over', 'someone', 'afterwards', 'myself', 'have',\n                  'would', 'anywhere', 'hereupon', 'using', 'everything', 'his', 'put', 'many', 'more', 'within', 'which', 'describe', 'thereby',\n                  'nine', 'elsewhere', 'other', 'he', 'if', 'per', 'your', 's', 'be', 'than', 'now', 'sometime', 'herein', 'why', '‘d', 'whereas',\n                  'behind', 'couldnt', 'de', \"'re\", 'least', 'latter', 'whereafter', 'part', 'after', 'front', 'interest', \"you'd\", 'whose', 'fire',\n                  'sincere', 'down', 'to', 'whence', 'ours', \"'s\", 'all', 'noone', 'just', 'anyhow', 'ie', 'having', 'her', 'been', 'get', 'former', \n                  'throughout', 'above', '’d', 'cannot', 'almost', 'do', 'quite', 'seem', 'give', 'first', 'several', 'also', 'seems', 'became', '’m',\n                  'sixty', 'anyway', '‘re', 'on', \"you're\", 'onto', 'co', 'third', 'fifty', 'had', 'seemed', '’s', 'yourselves', 'until', 'an', 'mine',\n                  'across', 'sometimes', 'hereby', 'eleven', 'might', 'mostly', 'un', 'i', \"'d\", 'itself', 'most', 'beforehand', 'five', 'beyond',\n                  'herself', \"you've\", 'unless', 'regarding', 'there', 'doesn', 'while', 'whoever', \"should've\", 'whereupon', 'name', 'further', 'o', \n                  'nobody', 'whereby', 'others', 'between', 'thus', 'any', \"you'll\", 'found', 'amongst', 'hers', 'wherever', 'ltd', 'still', 'somehow',\n                  'often', 'km', 'becoming', 'six', 'can', \"'ve\", 'make', 'hence', 'around', 'both', 'our', 'along', 'latterly', 'please', 'via', 'whole',\n                  'system', 've', 'd', 'you', 'themselves', 'here', 'used', 'in', 'forty', 'each', 'find', 'during', 'ain', 'ten', 'him', 'nevertheless',\n                  \"she's\", 'me', 'them', 'ma', 'meanwhile', 'and', 'y', 'did', 'fifteen', 'serious', '’re', \"it's\", '’ll', 'that', 'alone', 'together', \n                  'where', 'hereafter', 'once', 'himself', 'could', 'made', 'among', 'whom', 'cant', 'doing', 'again', 'therefore', 'beside', 'hundred',\n                  'three', 'etc', 'moreover', 'various', 'may', 'since', 'always', 'seeming', 'toward', 'are', 'll', 'everywhere', 'a', 'empty', 'yours',\n                  'theirs', 'back', 'else', 'own', 'as', 'somewhere', 'bill', '‘ll', 're', 'through', 'last', 'nowhere', 'what', 'take', 'computer',\n                  'yourself', 'eg', 'perhaps', 'thereupon', 'ourselves', 'against', 'inc', 'she', 'whether', 'their', 'm', 'such', 'thick', 'anything',\n                  '’ve', 'neither', 'none', 'amoungst', 'one', 'were', 'thru', 'am', 'about', 'without', 'up', 'otherwise', 'except', 'who', 'due',\n                  'thereafter', 'ever', 'much', 'out', 'how', 'whenever', 'before', 'it', 'some', 'being', 'mill', 'or', 'its', 'will', 'become',\n                  'besides', 'say', 'therein', 'another', 'see', 'anyone', 'becomes', 'never', 'towards', 'everyone', 'below', 'full', 'my', 'only', \n                  'fill', 'we', 'should', 'thence', 'indeed', 'this', 'was', 'less', 'so', 't', 'at', 'must', 'whither', 'off','whose','whom','who','do','did','does'\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:24:05.969064Z","iopub.execute_input":"2024-11-25T02:24:05.969335Z","iopub.status.idle":"2024-11-25T02:24:05.981893Z","shell.execute_reply.started":"2024-11-25T02:24:05.969309Z","shell.execute_reply":"2024-11-25T02:24:05.980848Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"### Remove stopwords, emails, link, special char, and Lowercase all the text","metadata":{}},{"cell_type":"code","source":"%%time\ndef remove_stopwords(text):\n  token = word_tokenize(text)\n  token_without_stopwords = []\n  for words in token:\n    if words not in stopwords_list:\n      token_without_stopwords.append(words)\n  \n  text = \" \".join(token_without_stopwords)\n  return text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:24:05.982964Z","iopub.execute_input":"2024-11-25T02:24:05.983206Z","iopub.status.idle":"2024-11-25T02:24:05.997131Z","shell.execute_reply.started":"2024-11-25T02:24:05.983182Z","shell.execute_reply":"2024-11-25T02:24:05.996318Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 1 µs, total: 5 µs\nWall time: 7.15 µs\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"dataframe['text'] = dataframe['text'].apply(remove_stopwords)\ndataframe.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:24:05.997993Z","iopub.execute_input":"2024-11-25T02:24:05.998236Z","iopub.status.idle":"2024-11-25T02:26:39.337912Z","shell.execute_reply.started":"2024-11-25T02:24:05.998212Z","shell.execute_reply":"2024-11-25T02:26:39.336878Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                               text    class\n0           2  Ex Wife Threatening SuicideRecently left wife ...  suicide\n3           8                  need helpjust help im crying hard  suicide\n4           9  ’ lostHello , Adam ( 16 ) ’ struggling years ’...  suicide\n5          11  Honetly idkI dont know im . feel like . All fe...  suicide\n6          12  [ Trigger warning ] Excuse self inflicted burn...  suicide","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>text</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>Ex Wife Threatening SuicideRecently left wife ...</td>\n      <td>suicide</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8</td>\n      <td>need helpjust help im crying hard</td>\n      <td>suicide</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9</td>\n      <td>’ lostHello , Adam ( 16 ) ’ struggling years ’...</td>\n      <td>suicide</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>11</td>\n      <td>Honetly idkI dont know im . feel like . All fe...</td>\n      <td>suicide</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>12</td>\n      <td>[ Trigger warning ] Excuse self inflicted burn...</td>\n      <td>suicide</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"%%time\nfrom tqdm._tqdm_notebook import tqdm_notebook\ntqdm_notebook.pandas()\ndef text_preprocessing(df,col_name):\n    column = col_name\n    df[column] = df[column].progress_apply(lambda x:str(x).lower())\n    df[column] = df[column].progress_apply(lambda x: th.remove_emails(x))\n    df[column] = df[column].progress_apply(lambda x: th.remove_html_tags(x))\n    df[column] = df[column].progress_apply(lambda x: th.remove_special_chars(x))\n    df[column] = df[column].progress_apply(lambda x: th.remove_accented_chars(x))\n    return(df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:26:39.340527Z","iopub.execute_input":"2024-11-25T02:26:39.340874Z","iopub.status.idle":"2024-11-25T02:26:39.348195Z","shell.execute_reply.started":"2024-11-25T02:26:39.340811Z","shell.execute_reply":"2024-11-25T02:26:39.347238Z"}},"outputs":[{"name":"stdout","text":"CPU times: user 530 µs, sys: 0 ns, total: 530 µs\nWall time: 478 µs\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"dataframe = text_preprocessing(dataframe, 'text')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:26:39.349187Z","iopub.execute_input":"2024-11-25T02:26:39.349429Z","iopub.status.idle":"2024-11-25T02:27:00.450930Z","shell.execute_reply.started":"2024-11-25T02:26:39.349405Z","shell.execute_reply":"2024-11-25T02:27:00.450066Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/100000 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b0cdf43bb81f4d798879829bb60b227c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/100000 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"94e9301199d74873846e6f4221181358"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/100000 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"049a1a25708048cebbbb8817bfc5c759"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/text_hammer/utils.py:97: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n  return BeautifulSoup(x, 'lxml').get_text().strip()\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/100000 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"12f63a30d33d40f4b02546c03f03b952"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/100000 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7a63e4f48f694da6b85f7e67f71113c3"}},"metadata":{}}],"execution_count":11},{"cell_type":"markdown","source":"## Tokenization","metadata":{}},{"cell_type":"code","source":"X = dataframe['text']\ny = dataframe['class']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:27:00.452087Z","iopub.execute_input":"2024-11-25T02:27:00.452356Z","iopub.status.idle":"2024-11-25T02:27:00.456740Z","shell.execute_reply.started":"2024-11-25T02:27:00.452330Z","shell.execute_reply":"2024-11-25T02:27:00.455786Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.text import Tokenizer\n # this means 20000 unique words can be taken \ntokenizer=Tokenizer(num_words= 20000,lower=True)\ntokenizer.fit_on_texts(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:28:06.887478Z","iopub.execute_input":"2024-11-25T02:28:06.887806Z","iopub.status.idle":"2024-11-25T02:28:11.091226Z","shell.execute_reply.started":"2024-11-25T02:28:06.887778Z","shell.execute_reply":"2024-11-25T02:28:11.090215Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.sequence import pad_sequences\nX = tokenizer.texts_to_sequences(X) # this converts texts into some numeric sequences \nX = pad_sequences(X,maxlen=200,padding='post') # this makes the length of all numeric sequences equal \nX[0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:28:13.664304Z","iopub.execute_input":"2024-11-25T02:28:13.665148Z","iopub.status.idle":"2024-11-25T02:28:16.929858Z","shell.execute_reply.started":"2024-11-25T02:28:13.665111Z","shell.execute_reply":"2024-11-25T02:28:16.929018Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"array([  395,   570,  2359,   104,   570,    27,  1157,   831,  1188,\n         256,  1536,   353,    95,    90,   873,  2359,    42, 13915,\n         399,    95,   141,   541, 12991,   210,   196,   116,     5,\n          75,     9,  3427,   871,    29,   438,    88,   336,   432,\n         151,   764,    38,   570,     3,   240,    61,  1157,   254,\n          68,  1945,   600,   101,    16,   114,     1,   255,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0,     0,     0,     0,     0,     0,     0,     0,\n           0,     0], dtype=int32)"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"X.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:28:19.771444Z","iopub.execute_input":"2024-11-25T02:28:19.772201Z","iopub.status.idle":"2024-11-25T02:28:19.777675Z","shell.execute_reply.started":"2024-11-25T02:28:19.772166Z","shell.execute_reply":"2024-11-25T02:28:19.776754Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(100000, 200)"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"import pickle\n\n# Save tokenizer to file\nwith open('/kaggle/working/tokenizer.pkl', 'wb') as f:\n    pickle.dump(tokenizer, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:28:21.767813Z","iopub.execute_input":"2024-11-25T02:28:21.768190Z","iopub.status.idle":"2024-11-25T02:28:21.868742Z","shell.execute_reply.started":"2024-11-25T02:28:21.768161Z","shell.execute_reply":"2024-11-25T02:28:21.868063Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"### Word2Vec","metadata":{}},{"cell_type":"code","source":"# pip install gensim\nimport gensim.downloader as api\nglove_gensim  = api.load('glove-wiki-gigaword-100') #100 dimension","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:28:31.848729Z","iopub.execute_input":"2024-11-25T02:28:31.849099Z","iopub.status.idle":"2024-11-25T02:29:24.726029Z","shell.execute_reply.started":"2024-11-25T02:28:31.849070Z","shell.execute_reply":"2024-11-25T02:29:24.725086Z"}},"outputs":[{"name":"stdout","text":"[=========-----------------------------------------] 19.6% 25.1/128.1MB downloaded","output_type":"stream"},{"text":"IOPub message rate exceeded.\nThe notebook server will temporarily stop sending output\nto the client in order to avoid crashing it.\nTo change this limit, set the config variable\n`--NotebookApp.iopub_msg_rate_limit`.\n\nCurrent values:\nNotebookApp.iopub_msg_rate_limit=1000.0 (msgs/sec)\nNotebookApp.rate_limit_window=3.0 (secs)\n\n","name":"stderr","output_type":"stream"},{"name":"stdout","text":"[================================================--] 98.0% 125.5/128.1MB downloaded","output_type":"stream"},{"text":"IOPub message rate exceeded.\nThe notebook server will temporarily stop sending output\nto the client in order to avoid crashing it.\nTo change this limit, set the config variable\n`--NotebookApp.iopub_msg_rate_limit`.\n\nCurrent values:\nNotebookApp.iopub_msg_rate_limit=1000.0 (msgs/sec)\nNotebookApp.rate_limit_window=3.0 (secs)\n\n","name":"stderr","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"import numpy as np\nfrom gensim.models import KeyedVectors\nvector_size = 100\nnum_words = 20000\ngensim_weight_matrix = np.zeros((num_words ,vector_size))\ngensim_weight_matrix.shape\nfor word, index in tokenizer.word_index.items():\n    if index < num_words: # since index starts with zero \n        if word in glove_gensim.index_to_key:\n            gensim_weight_matrix[index] = glove_gensim[word]\n        else:\n            gensim_weight_matrix[index] = np.zeros(100)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:30:07.909389Z","iopub.execute_input":"2024-11-25T02:30:07.910095Z","iopub.status.idle":"2024-11-25T02:30:23.595900Z","shell.execute_reply.started":"2024-11-25T02:30:07.910061Z","shell.execute_reply":"2024-11-25T02:30:23.595139Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"## Model Building","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport gensim.downloader as api\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Dropout, Dense\nfrom keras.layers import GRU\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, GRU, Dense, Dropout, Input, BatchNormalization\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:34:47.030279Z","iopub.execute_input":"2024-11-25T02:34:47.030599Z","iopub.status.idle":"2024-11-25T02:34:47.035936Z","shell.execute_reply.started":"2024-11-25T02:34:47.030572Z","shell.execute_reply":"2024-11-25T02:34:47.034943Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ny=pd.get_dummies(dataframe['class'])\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:31:22.828409Z","iopub.execute_input":"2024-11-25T02:31:22.829029Z","iopub.status.idle":"2024-11-25T02:31:22.880085Z","shell.execute_reply.started":"2024-11-25T02:31:22.828999Z","shell.execute_reply":"2024-11-25T02:31:22.879296Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"EMBEDDING_DIM = 100  # Dimension of word embeddings\nMAX_NUM_WORDS = 20000  # Maximum number of unique words\nMAX_SEQUENCE_LENGTH = 200  # Fixed sequence length for all input data\n# Build the model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Input(shape=(X.shape[1],)))\n\n# Embedding layer with pre-trained GloVe embeddings\nmodel.add(Embedding(input_dim=MAX_NUM_WORDS,\n                    output_dim=EMBEDDING_DIM,\n                    weights=[gensim_weight_matrix],\n                    trainable=False)) \n\n# Dropout layer\nmodel.add(Dropout(0.2))\n\n# GRU layer 1\nmodel.add(GRU(100, return_sequences=True))\n\n# Dropout layer\nmodel.add(Dropout(0.2))\n\n# GRU layer 2\nmodel.add(GRU(100, return_sequences=True))\n\n# Dropout layer\nmodel.add(Dropout(0.2))\n\n# GRU layer 3\nmodel.add(GRU(100, return_sequences=False))\n\n# BatchNormalization layer\nmodel.add(BatchNormalization())\n\n# Dropout layer\nmodel.add(Dropout(0.3))\n\n# Dense layer\nmodel.add(Dense(64, activation='relu'))\n\n# Dropout layer\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Dense(y.shape[1], activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n\n# Display model summary\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:36:01.392366Z","iopub.execute_input":"2024-11-25T02:36:01.392748Z","iopub.status.idle":"2024-11-25T02:36:02.039960Z","shell.execute_reply.started":"2024-11-25T02:36:01.392714Z","shell.execute_reply":"2024-11-25T02:36:02.039227Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_6\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_6\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_3 (\u001b[38;5;33mEmbedding\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │     \u001b[38;5;34m2,000,000\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru_4 (\u001b[38;5;33mGRU\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │        \u001b[38;5;34m60,600\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru_5 (\u001b[38;5;33mGRU\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │        \u001b[38;5;34m60,600\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_6 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m100\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru_6 (\u001b[38;5;33mGRU\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)            │        \u001b[38;5;34m60,600\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)            │           \u001b[38;5;34m400\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_7 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m6,464\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_8 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)              │           \u001b[38;5;34m130\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,000,000</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">60,600</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">60,600</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">60,600</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">400</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">6,464</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">130</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,188,794\u001b[0m (8.35 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,188,794</span> (8.35 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m188,594\u001b[0m (736.70 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">188,594</span> (736.70 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,000,200\u001b[0m (7.63 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,000,200</span> (7.63 MB)\n</pre>\n"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"#EarlyStopping and ModelCheckpoint\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nes = EarlyStopping(monitor = 'val_loss', mode = 'min', verbose = 1, patience = 5)\nmc = ModelCheckpoint('./model.keras', monitor = 'val_accuracy', mode = 'max', verbose = 1, save_best_only = True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:36:40.951867Z","iopub.execute_input":"2024-11-25T02:36:40.952213Z","iopub.status.idle":"2024-11-25T02:36:40.957223Z","shell.execute_reply.started":"2024-11-25T02:36:40.952183Z","shell.execute_reply":"2024-11-25T02:36:40.956295Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"history_embedding = model.fit(X_train, y_train, \n                                epochs = 25, batch_size = 128, \n                                validation_data=(X_test, y_test),\n                                verbose = 1, callbacks= [es, mc]  )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:36:43.748696Z","iopub.execute_input":"2024-11-25T02:36:43.749413Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/25\n\u001b[1m546/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.5488 - loss: 0.6688\nEpoch 1: val_accuracy improved from -inf to 0.86590, saving model to ./model.keras\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 51ms/step - accuracy: 0.5491 - loss: 0.6684 - val_accuracy: 0.8659 - val_loss: 0.3330\nEpoch 2/25\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.8957 - loss: 0.2690\nEpoch 2: val_accuracy did not improve from 0.86590\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 51ms/step - accuracy: 0.8957 - loss: 0.2689 - val_accuracy: 0.8442 - val_loss: 0.4182\nEpoch 3/25\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.9129 - loss: 0.2255\nEpoch 3: val_accuracy improved from 0.86590 to 0.91427, saving model to ./model.keras\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 51ms/step - accuracy: 0.9129 - loss: 0.2255 - val_accuracy: 0.9143 - val_loss: 0.2182\nEpoch 4/25\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.9203 - loss: 0.2070\nEpoch 4: val_accuracy improved from 0.91427 to 0.92160, saving model to ./model.keras\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 51ms/step - accuracy: 0.9204 - loss: 0.2070 - val_accuracy: 0.9216 - val_loss: 0.2107\nEpoch 5/25\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.9254 - loss: 0.1960\nEpoch 5: val_accuracy did not improve from 0.92160\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 51ms/step - accuracy: 0.9254 - loss: 0.1960 - val_accuracy: 0.9204 - val_loss: 0.2238\nEpoch 6/25\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step - accuracy: 0.9256 - loss: 0.1909\nEpoch 6: val_accuracy improved from 0.92160 to 0.92467, saving model to ./model.keras\n\u001b[1m547/547\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 51ms/step - accuracy: 0.9256 - loss: 0.1909 - val_accuracy: 0.9247 - val_loss: 0.2013\nEpoch 7/25\n\u001b[1m161/547\u001b[0m \u001b[32m━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━\u001b[0m \u001b[1m16s\u001b[0m 43ms/step - accuracy: 0.9342 - loss: 0.1782","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":"## Model Evaluation","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.plot(history_embedding.history['accuracy'],c='b',label='train accuracy')\nplt.plot(history_embedding.history['val_accuracy'],c='r',label='validation accuracy')\nplt.legend(loc='lower right')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:27:11.260293Z","iopub.status.idle":"2024-11-25T02:27:11.260607Z","shell.execute_reply.started":"2024-11-25T02:27:11.260453Z","shell.execute_reply":"2024-11-25T02:27:11.260469Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.plot(history_embedding.history['loss'],c='b',label='train loss')\nplt.plot(history_embedding.history['val_loss'],c='r',label='validation loss')\nplt.legend(loc='upper right')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:27:11.261923Z","iopub.status.idle":"2024-11-25T02:27:11.262355Z","shell.execute_reply.started":"2024-11-25T02:27:11.262121Z","shell.execute_reply":"2024-11-25T02:27:11.262143Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix\ny_pred=model.predict(X_test)\ny_pred.shape\nimport numpy as np\ny_pred=np.argmax(y_pred,axis=1)\ny_pred\ny_test = y_test.to_numpy()\ny_test=np.argmax(y_test,axis = 1)\nprint(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:27:11.263959Z","iopub.status.idle":"2024-11-25T02:27:11.264388Z","shell.execute_reply.started":"2024-11-25T02:27:11.264160Z","shell.execute_reply":"2024-11-25T02:27:11.264183Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Predict New Data","metadata":{}},{"cell_type":"code","source":"# Teks baru untuk prediksi\nnew_data = [\"i am killing someone in a game \"]\n# Tokenisasi dan konversi teks ke dalam bentuk indeks kata\nnew_data_tokenized = tokenizer.texts_to_sequences(new_data)\n\n# Padding untuk memastikan panjangnya sesuai dengan model\nnew_data_padded = pad_sequences(new_data_tokenized, maxlen=200, padding='post')\n\n# Cek apakah padding dan tokenisasi bekerja dengan baik\nprint(new_data_padded)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:27:11.265516Z","iopub.status.idle":"2024-11-25T02:27:11.265957Z","shell.execute_reply.started":"2024-11-25T02:27:11.265717Z","shell.execute_reply":"2024-11-25T02:27:11.265740Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Prediksi dengan model yang sudah dilatih\nprediction = model.predict(new_data_padded)\n\n# Menentukan kelas prediksi\npredicted_class = np.argmax(prediction, axis=1)\n\n# Mengambil probabilitas untuk kelas prediksi\npredicted_prob = prediction[0][predicted_class[0]] * 100\n\n# Output prediksi dan persentase\nclass_names = ['Not Suicidal', 'Suicidal']\nprint(f\"Predicted class: {class_names[predicted_class[0]]}\")\nprint(f\"Prediction probability: {predicted_prob:.2f}%\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-25T02:27:11.267725Z","iopub.status.idle":"2024-11-25T02:27:11.268170Z","shell.execute_reply.started":"2024-11-25T02:27:11.267948Z","shell.execute_reply":"2024-11-25T02:27:11.267972Z"}},"outputs":[],"execution_count":null}]}